package com.gk.mvp.view.activity;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.DownloadListener;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import com.gk.R;
import com.gk.beans.FileTable;
import com.gk.beans.FileTableDao;
import com.gk.beans.MaterialItemBean;
import com.gk.global.YXXApplication;
import com.gk.global.YXXConstants;
import com.gk.http.download.DownloadApi;
import com.gk.http.download.DownloadProgressHandler;
import com.gk.http.download.ProgressHelper;
import com.gk.mvp.view.custom.ProgressWebView;
import com.gk.mvp.view.custom.TopBarView;
import com.nostra13.universalimageloader.utils.L;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import butterknife.BindView;
import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

/**
 * Created by JDRY-SJM on 2017/12/13.
 */

public class FileOpenTestActivity extends SjmBaseActivity {
    @BindView(R.id.top_bar)
    TopBarView topBar;
    @BindView(R.id.progressWebView)
    ProgressWebView webView;

    private MaterialItemBean.DataBean dataBean;
    private FileTableDao fileTableDao = YXXApplication.getDaoSession().getFileTableDao();
    private Context mContext = this;

    @Override
    public int getResouceId() {
        return R.layout.activity_materil_detail;
    }

    @Override
    protected void onCreateByMe(Bundle savedInstanceState) {
        initData();
        setTopBarListener();
    }

    private void initData() {
        Intent intent = getIntent();
        if (null == intent) {
            return;
        }
        dataBean = (MaterialItemBean.DataBean) intent.getSerializableExtra("bean");
        topBar.getTitleView().setText(dataBean.getFileName());
        setWebView();
    }

    private void retrofitDownload() {
        //监听下载进度
        final ProgressDialog dialog = new ProgressDialog(this);
        dialog.setProgressNumberFormat("%1d KB/%2d KB");
        dialog.setTitle("下载");
        dialog.setMessage("正在下载，请稍后...");
        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        dialog.setCancelable(false);
        dialog.show();

        Retrofit.Builder retrofitBuilder = new Retrofit.Builder()
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create())
                .baseUrl(YXXConstants.HOST);//"http://msoftdl.360.cn"
        OkHttpClient.Builder builder = ProgressHelper.addProgress(null);
        DownloadApi retrofit = retrofitBuilder
                .client(builder.build())
                .build().create(DownloadApi.class);

        ProgressHelper.setProgressHandler(new DownloadProgressHandler() {
            @Override
            protected void onProgress(long bytesRead, long contentLength, boolean done) {
//                Log.e("是否在主线程中运行", String.valueOf(Looper.getMainLooper() == Looper.myLooper()));
//                Log.e("onProgress", String.format("%d%% done\n", (100 * bytesRead) / contentLength));
//                Log.e("done", "--->" + String.valueOf(done));
                dialog.setMax((int) (contentLength / 1024));
                dialog.setProgress((int) (bytesRead / 1024));
                if (done) {
                    dialog.dismiss();
                    toast("下载成功！");
                }
            }
        });
        Call<ResponseBody> call = retrofit.retrofitDownload(dataBean.getFileUrl());
        call.enqueue(new Callback<ResponseBody>() {
            @SuppressWarnings("ConstantConditions")
            @Override
            public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    File file = new File(Environment.getExternalStorageDirectory() + "/Download/", dataBean.getFileName());
                    String fileAbsolutePath = file.getAbsolutePath();
                    try {
                        assert null != response.body();
                        InputStream is = response.body().byteStream();
                        FileOutputStream fos = new FileOutputStream(file);
                        BufferedInputStream bis = new BufferedInputStream(is);
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = bis.read(buffer)) != -1) {
                            fos.write(buffer, 0, len);
                            fos.flush();
                        }
                        fos.close();
                        bis.close();
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
//                    insertOrUpdate(fileAbsolutePath);
//                    Intent intent = JdryFileUtil.getFileIntent(file);
//                    startActivity(intent);
                } else {
                    toast(response.message());
                }
            }

            @Override
            public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
                toast(t.getMessage());
            }
        });
    }

    private FileTable getFileTable() {
        return fileTableDao.queryBuilder().where(FileTableDao.Properties.DocId.eq(dataBean.getId())).build().unique();
    }

    private void insertOrUpdate(String localPath) {
        FileTable fileTable = new FileTable();
        fileTable.setDocId(dataBean.getId());
        fileTable.setDocName(dataBean.getFileName());
        fileTable.setDocFilepath(dataBean.getFileUrl());
        fileTable.setDocUploadTime(dataBean.getUploadTime());
        fileTable.setLocalFilePath(localPath);
        fileTableDao.insertOrReplace(fileTable);
    }

    private void setTopBarListener() {
        topBar.getBackView().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (webView.canGoBack()) {
                    webView.goBack();
                }
                closeActivity();
            }
        });
    }

    private void setWebView() {
        //微软的在线预览
        String url = "https://view.officeapps.live.com/op/view.aspx?src=" + dataBean.getFileUrl();
        String googleUrl = "http://docs.google.com/gview?embedded=true&url=" + dataBean.getFileUrl();
        String testUrl = "https://view.officeapps.live.com/op/view.aspx?src=newteach.pbworks.com%2Ff%2Fele%2Bnewsletter.docx";
        webView.setWebViewClient(new AppWebViewClients());
        webView.getSettings().setJavaScriptEnabled(true);
        webView.getSettings().setUseWideViewPort(true);
        webView.loadUrl(testUrl);
    }

    public class AppWebViewClients extends WebViewClient {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            view.loadUrl(url);
            return true;
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);

        }
    }

    //内部类
    public class MyWebViewClient extends WebViewClient {

        // 如果页面中链接，如果希望点击链接继续在当前browser中响应，
        // 而不是新开Android的系统browser中响应该链接，必须覆盖 webview的WebViewClient对象。
        public boolean shouldOverviewUrlLoading(WebView view, String url) {
            L.i("shouldOverviewUrlLoading");
            view.loadUrl(url);
            return true;

        }

        public void onPageStarted(WebView view, String url, Bitmap favicon) {
            L.i("onPageStarted");
        }

        public void onPageFinished(WebView view, String url) {
            L.i("onPageFinished");
            super.onPageFinished(view, url);
        }

        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
            //handler.proceed();  // 接受所有网站的证书
            //super.onReceivedSslError(view, handler, error);
        }
    }

    //内部类
    private class MyWebViewDownLoadListener implements DownloadListener {

        @Override
        public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype,
                                    long contentLength) {
            if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                Toast t = Toast.makeText(FileOpenTestActivity.this, "需要SD卡。", Toast.LENGTH_LONG);
                t.setGravity(Gravity.CENTER, 0, 0);
                t.show();
                return;
            }
            retrofitDownload();
        }

    }

    private ProgressDialog mDialog;

    private void showProgressDialog() {
        if (mDialog == null) {
            mDialog = new ProgressDialog(mContext);
            mDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);//设置风格为圆形进度条
            mDialog.setMessage("正在加载 ，请等待...");
            mDialog.setIndeterminate(false);//设置进度条是否为不明确
            mDialog.setCancelable(true);//设置进度条是否可以按退回键取消
            mDialog.setCanceledOnTouchOutside(false);
            mDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                @Override
                public void onDismiss(DialogInterface dialog) {
                    // TODO Auto-generated method stub
                    mDialog = null;
                }
            });
            mDialog.show();

        }
    }

    private void closeProgressDialog() {
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
        }
    }

    //点击返回上一页面而不是退出浏览器
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && webView.canGoBack()) {
            webView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    //销毁Webview
    @Override
    protected void onDestroy() {
        if (webView != null) {
            webView.loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
            webView.clearHistory();
            ((ViewGroup) webView.getParent()).removeView(webView);
            webView.destroy();
            webView = null;
        }
        super.onDestroy();
    }
}
